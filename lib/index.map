{"version":3,"sources":["create-deck.js","get-deal-order.js","get-from-cards-to-deal.js","deal-cards.js","get-player-index-from-id.js","get-player.js","get-rank-suit.js","get-scoreboard.js","get-winning-card-index.js","invalid-bids.js","next-player.js","order-array-from-index.js","pick-cards.js","random-from-array.js","remove-item-from-array.js","remove-keys.js","shuffle-array.js","valid-bid.js","valid-play.js","index.js"],"names":["module","exports","suits","rank","map","suit","reduce","acc","val","concat","dealer","playerId","players","getPlacement","id","player","index","socket","placement","filter","dealerPlacement","length","cardsToDeal","nrOfPlayers","dealOrder","card","getDealOrder","require","getFromCardsToDeal","nrOfCards","deck","cards","slice","remainingCards","newPlayers","newDeck","getRank","getSuit","getUnicodeSuit","getValue","values","playerIds","points","col","i","row","totals","playerPoints","cur","leadingCard","trump","leadingSuit","trumpSuit","splitCards","trumpCards","sort","a","b","value","state","activePlayer","nrOCards","currentBidTotal","curr","hasOwnProperty","bid","currentPlayerIndex","arr","amount","pickedCards","Math","floor","random","deepEqual","item","x","keys","obj","newObj","Object","assign","forEach","key","getPlayer","playedCard","currentPlayer","currentPlayersHand","includes","leadingPlayer","leadSuit","playedSuit","suitsOnHand","createDeck","dealCards","getPlayerIndexFromId","getScoreboard","getWinningCardIndex","invalidBids","nextPlayer","orderArrayFromIndex","pickCards","randomFromArray","removeItemFromArray","removeKeys","shuffleArray","validBid","validPlay"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["module.exports = function createDeck() {\n  const suits = ['c', 'd', 'h', 's'];\n  const rank = [\n    '2', '3', '4', '5', '6', '7', '8',\n    '9', '10', 'J', 'Q', 'K', 'A',\n  ];\n\n  return suits.map((suit) => rank.map((rank) => suit + rank))\n    .reduce((acc, val) => acc.concat(val));\n};\n","module.exports = function getDealOrder(dealer, playerId, players) {\n  function getPlacement(players, id) {\n    return players\n      .map((player, index) => ({id: player.socket.id, placement: index}))\n      .filter((player) => player.id === id)\n      .map((player) => player.placement)[0];\n  }\n\n  const dealerPlacement = getPlacement(players, dealer);\n  const playerPlacement = getPlacement(players, playerId);\n\n  return (\n    (playerPlacement - dealerPlacement) + players.length - 1\n  ) % players.length;\n};\n","module.exports = function getFromCardsToDeal(\n  cardsToDeal, nrOfPlayers, dealOrder\n) {\n  return cardsToDeal.filter((card, index) => {\n    return (index - dealOrder) % nrOfPlayers === 0;\n  });\n};\n","const getDealOrder = require('./get-deal-order');\nconst getFromCardsToDeal = require('./get-from-cards-to-deal');\n\nmodule.exports = function dealCards(nrOfCards, dealer, deck, players) {\n  const cardsToDeal = deck.cards.slice(0, nrOfCards * players.length);\n  const remainingCards = deck.cards.slice(nrOfCards * players.length);\n\n  const newPlayers = players.map((player) => {\n    const cards = getFromCardsToDeal(\n      cardsToDeal,\n      players.length,\n      getDealOrder(dealer, player.socket.id, players)\n    );\n\n    return {...player, cards};\n  });\n\n  return {newDeck: {...deck, cards: remainingCards}, newPlayers};\n};\n","module.exports = function getPlayerIndexFromId(id, players) {\n  return players\n    .map((player, index) => ({id: player.socket.id, index}))\n    .filter((player) => player.id === id)[0].index;\n};\n","module.exports = function getPlayer(id, players) {\n  return players.filter((player) => {\n    return player.socket.id === id;\n  })[0];\n};\n","module.exports = {\n  getRank,\n  getSuit,\n  getUnicodeSuit,\n  getValue,\n};\n\nfunction getRank(card) {\n  return card.slice(1);\n}\n\nfunction getSuit(card) {\n  switch (card.slice(0, 1)) {\n  case 'c':\n    return 'clubs';\n  case 'd':\n    return 'diamonds';\n  case 'h':\n    return 'hearts';\n  case 's':\n    return 'spades';\n  }\n}\n\nfunction getUnicodeSuit(card) {\n  switch (card.slice(0, 1)) {\n  case 'c':\n    return '\\u2663';\n  case 'd':\n    return '\\u2666';\n  case 'h':\n    return '\\u2665';\n  case 's':\n    return '\\u2660';\n  }\n}\n\nfunction getValue(card) {\n  const rank = getRank(card);\n  const values = {\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    '10': 10,\n    'J': 11,\n    'Q': 12,\n    'K': 13,\n    'A': 14,\n  };\n\n  return values[rank];\n}\n","module.exports = function getScoreboard(players) {\n  const playerIds = players.map((player) => player.socket.id);\n  const points = players.map((player) => player.points);\n  const roundPoints = points[0].map((col, i) => points.map((row) => row[i]));\n  const totals = points.map((playerPoints) => (\n    playerPoints.reduce((acc, cur) => acc + cur))\n  );\n\n  return {players: playerIds, points: roundPoints, totals};\n};\n","const {getSuit, getValue} = require('./get-rank-suit');\n\nmodule.exports = function getWinningCardIndex(leadingCard, trump, cards) {\n  const leadingSuit = getSuit(leadingCard);\n  const trumpSuit = getSuit(trump);\n  const splitCards = cards.map((card, index) => ({\n    index,\n    suit: getSuit(card),\n    value: getValue(card),\n  }));\n\n  const trumpCards = splitCards.filter((card) => card.suit === trumpSuit);\n  if (trumpCards.length) {\n    return trumpCards.sort((a, b) => b.value - a.value)[0].index;\n  }\n\n  const leadingCards = splitCards.filter((card) => card.suit === leadingSuit);\n  return leadingCards.sort((a, b) => b.value - a.value)[0].index;\n};\n","module.exports = function invalidBids(state) {\n  if (state.activePlayer !== state.dealer) {\n    return [];\n  }\n\n  const nrOCards = state.players[0].cards.length;\n  const currentBidTotal = state.players.reduce((acc, curr) => {\n    return curr.hasOwnProperty('bid') && curr.bid && curr.bid >= 0 ?\n      acc + curr.bid :\n      acc + 0;\n  }, 0);\n\n  if (nrOCards >= currentBidTotal) {\n    return [nrOCards - currentBidTotal];\n  }\n\n  return [];\n};\n","module.exports = function nextPlayer(id, players) {\n  const currentPlayerIndex = players\n    .map((player, index) => ({id: player.socket.id, index}))\n    .filter((player) => player.id === id)\n    .map((player) => player.index)[0];\n\n  const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n\n  return players[nextPlayerIndex].socket.id;\n};\n","module.exports = function orderArrayFromIndex(index, arr) {\n  if (index === 0) {\n    return arr;\n  }\n  return arr.slice(index).concat(arr.slice(0, index));\n};\n","module.exports = function pickCards(amount, deck) {\n  const pickedCards = deck.cards.slice(0, amount);\n  const remainingCards = deck.cards.slice(amount);\n\n  return {cards: pickedCards, deck: {...deck, cards: remainingCards}};\n};\n","module.exports = function randomFromArray(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n","const deepEqual = require('deep-equal');\n\nmodule.exports = function removeItemFromArray(item, arr) {\n  return arr.filter((x) => !deepEqual(x, item));\n};\n","module.exports = function removeKeys(keys, obj) {\n  const newObj = Object.assign({}, obj);\n\n  keys.forEach((key) => {\n    delete newObj[key];\n  });\n\n  return newObj;\n};\n","module.exports = function shuffleArray(arr) {\n  return arr\n    .map((a) => ({sort: Math.random(), value: a}))\n    .sort((a, b) => a.sort - b.sort)\n    .map((a) => a.value);\n};\n","module.exports = function validBid(bid, state) {\n  const nrOfCards = state.players[0].cards.length;\n\n  if (bid > nrOfCards || bid < 0) {\n    return false;\n  }\n\n  if (state.activePlayer === state.dealer) {\n    const currentBidTotal = state.players.reduce((acc, curr) => {\n      return curr.hasOwnProperty('bid') && curr.bid && curr.bid >= 0 ?\n        acc + curr.bid :\n        acc + 0;\n    }, 0);\n\n    if (currentBidTotal + bid === nrOfCards) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","const getPlayer = require('./get-player');\nconst {getSuit} = require('./get-rank-suit');\n\nmodule.exports = function validPlay(playedCard, state) {\n  const currentPlayer = getPlayer(state.activePlayer, state.players);\n  const currentPlayersHand = currentPlayer &&\n    currentPlayer.hasOwnProperty('cards') ? currentPlayer.cards : [];\n  const playedCardInHand = currentPlayersHand.includes(playedCard);\n\n  // Only cards in hand can be played\n  if (!playedCardInHand) {\n    return false;\n  }\n\n  // If it's the leading players turn, any card on hand is allowed\n  if (!state.leadingPlayer) {\n    return true;\n  }\n\n  // Other players need to follow suit if possible\n  const leadSuit = getSuit(\n    getPlayer(state.leadingPlayer, state.players).playedCard\n  );\n  const playedSuit = getSuit(playedCard);\n  const suitsOnHand = currentPlayersHand.map((card) => getSuit(card));\n\n  if (playedSuit === leadSuit) {\n    return true;\n  }\n\n  if (!suitsOnHand.includes(leadSuit)) {\n    return true;\n  }\n\n  return false;\n};\n","const createDeck = require('./create-deck');\nconst dealCards = require('./deal-cards');\nconst getDealOrder = require('./get-deal-order');\nconst getFromCardsToDeal = require('./get-from-cards-to-deal');\nconst getPlayerIndexFromId = require('./get-player-index-from-id');\nconst getPlayer = require('./get-player');\nconst {\n  getRank,\n  getSuit,\n  getUnicodeSuit,\n  getValue,\n} = require('./get-rank-suit');\nconst getScoreboard = require('./get-scoreboard');\nconst getWinningCardIndex = require('./get-winning-card-index');\nconst invalidBids = require('./invalid-bids');\nconst nextPlayer = require('./next-player');\nconst orderArrayFromIndex = require('./order-array-from-index');\nconst pickCards = require('./pick-cards');\nconst randomFromArray = require('./random-from-array');\nconst removeItemFromArray = require('./remove-item-from-array');\nconst removeKeys = require('./remove-keys');\nconst shuffleArray = require('./shuffle-array');\nconst validBid = require('./valid-bid');\nconst validPlay = require('./valid-play');\n\nmodule.exports = {\n  createDeck,\n  dealCards,\n  getDealOrder,\n  getFromCardsToDeal,\n  getPlayerIndexFromId,\n  getPlayer,\n  getRank,\n  getSuit,\n  getUnicodeSuit,\n  getValue,\n  getScoreboard,\n  getWinningCardIndex,\n  invalidBids,\n  nextPlayer,\n  orderArrayFromIndex,\n  pickCards,\n  randomFromArray,\n  removeItemFromArray,\n  removeKeys,\n  shuffleArray,\n  validBid,\n  validPlay,\n};\n"]}